1.  用vue-cli4 创建一个新项目
2.  修改.eslintrc.js 和 vscode的settings.json， 完成项目的eslint代码检测和 编辑器的自动格式矫正
    需要安装vscode的插件: 
	Vetur@1.14.2、 ESLint@2.1.5、Prettier - Code formatter@3.14.1 

3.  创建 vue.config.js，加入一些vue工程相关的配置， css模块先注释， 不然会报错path找不到
4.  在package.json 新添加一条 启动命令  
	"dev": "vue-cli-service serve --open",
5.  因为有使用 jsx的 需求
	"@vue/babel-helper-vue-jsx-merge-props": "^1.0.0",
    	"@vue/babel-preset-jsx": "^1.1.2",

    需要 tyarn add @vue/babel-helper-vue-jsx-merge-props @vue/babel-preset-jsx --dev
6. vue.config.js 中 引入的 path， 所以需要安装对应的模块
    tyarn add path --dev

   (yarn 的 安装速度 会 显著大于 npm)

7. 修改 babel.config.js文件， 并安装
	tyarn add babel-plugin-component --dev
8. 安装 @babel/polyfill 并在 main.js 中引入
	tyarn add @babel/polyfill
9. 删除views及下面的vue文件, 创建pages文件夹
10. 在 pages文件夹下创建一个 home.vue 的文件， 并且制作 vscode的 vue 代码片段
11. 修改路由配置， src/router/index.js
12. 安装 axios、vue-axios
	yarn add axios vue-axios
13. 二次封装 axios请求， 主要用于修改默认配置， 已经请求拦截
14. 安装 element-ui， 以按需加载的方式使用 
	yarn add element-ui
15. 安装mockjs, 并且使用 koa2 + mockjs 的方式搭建一个接口服务器, 在src的同级目录下
	npm install koa-generator -g    //  使用 yarn global 代替 npm -g
	koa2 server
                cd server
                yarn install
                yarn start
	
16. 安装 lodash， 并且复制在 Vue的原型上， 这样在 vue组件中 可以 直接this.xxxx使用
	yarn add lodash
17. 全局定义vue字段过滤器, 创建一个text-filters.js的文件
18. 创建一个中央事件总线Event Bus, 实现兄弟组件通信
	Event Bus 一般包含 $on  &off $once  $emit 四个事件
19. 全局注入 stylus的变量、 stylus的工具类、  stylus的混合函数方法
20. 网站的请求方法全部存在 一个文件中， 方便维护， /src/api/request-data.js
21. vue-cli4的热刷新
        1. yarn add  webpack-dev-server --dev
        2. 找到vue.config.js文件做修改
	deServer: {
   	      disableHostCheck:true //webpack4.0 开启热更新
	}
       3. 配置package.json文件
	"dev": "vue-cli-service serve && webpack-dev-server --open"
       4. 开发环境时， 
	css: {
	       extract: false,  // 不将vue中的css 抽离， 可以做到css的热刷新
               }
22. 完成仿站酷的部分demo















	